/**
* @file    rcc.h
* @author  Antonio Vitor Grossi Bassi (antoniovitor.gb@gmail.com)
* @brief   Reset and Clock Control Drivers reference.
* @version 0.1
* @date    23-02-2025
* 
* @copyright Copyright (c) 2025
* 
*/

#ifndef RCC_H_
#define RCC_H_  

/* Dependencies */
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <stm32f4xx.h>
#include <main.h>

/**
 * @brief System Clock Source configurable values.
 * 
 */
#define RCC_CONFIG_SYSCLK_CLKSRC_HSI (0U)
#define RCC_CONFIG_SYSCLK_CLKSRC_LSI (1U)
#define RCC_CONFIG_SYSCLK_CLKSRC_HSE (2U)
#define RCC_CONFIG_SYSCLK_CLKSRC_PLL (3U)

/**
 * @brief System Clock Source PLL P factor configurable values.
 * 
 */
#define RCC_CONFIG_PLL_P_2 (0U)
#define RCC_CONFIG_PLL_P_4 (1U)
#define RCC_CONFIG_PLL_P_6 (2U)
#define RCC_CONFIG_PLL_P_8 (3U)

/**
 * @brief PLL Clock Source configurable values.
 * 
 */
#define RCC_CONFIG_PLL_CLKSRC_HSI (0U)
#define RCC_CONFIG_PLL_CLKSRC_HSE (1U)

typedef enum rcc_err
{
    ERCC_NOCLK = -5,
    ERCC_INVCLKSRC = -4,
    ERCC_INVPERIPH = -3,
    ERCC_INVARG = -2,
    ERCC_BUSY = -1,
    ERCC_OK = 0
}RCC_Err_T;

typedef union rcc_sysclk_config_t
{
    struct
    {
        u32 ClockSource     : 2;    /*!< Clock source to be supplied to the MCU system clock tree. */
        u32 ExternalBypass  : 1;    /*!< Enable (1U) or disable (0U) high-speed external clock bypass. Enabled in case of a clock signal generated by another system.*/
        u32 PLL_Source      : 1;    /*!< Clock source to be supplied to the Phase-Locked Loop.*/
        u32 HSI_TrimValue   : 4;    /*!< Trim value for the HSI oscillator, used to compensate for clock signal jitter generated by heat. */
        u32 PLL_Q_DivFactor : 4;    /*!< PLL Q Division Factor. */
        u32 PLL_P_DivFactor : 2;    /*!< PLL P Division Factor. */
        u32 PLL_N_MulFactor : 9;    /*!< PLL N Multiplication Factor. */
        u32 PLL_M_DivFactor : 6;    /*!< PLL M Division Factor. */
        u32 AHB_Prescaler   : 3;    /*!< AHB prescaler factor, ranging from 0 to 7. Prescaler value is a power of 2 value, e.g. if AHB_Prescaler = 4U then clock is prescaled by 64. */
    };
    u32 Word;
}RCC_SysClk_Config_T;

typedef struct rcc_driver
{
    u32         (*GetSystemCoreCLock)(void);
    RCC_Err_T   (*ConfigSystemClock)(RCC_SysClk_Config_T *Config);
    RCC_SysClk_Config_T* (*GetSystemClockConfig)(void);
    RCC_Err_T   (*SetAPB1ClockPrescaler)(u8 APB1Prescaler);
    RCC_Err_T   (*SetAPB2ClockPrescaler)(u8 APB2Prescaler);
    RCC_Err_T   (*ConfigRealTimeClock)(void);
    RCC_Err_T   (*EnablePeriphClock)(u32 PeriphId);
    RCC_Err_T   (*DisablePeriphClock)(u32 PeriphId);
    RCC_Err_T   (*IsPeriphClkEnabled)(u32 PeriphId);
}RCC_Driver_T;

extern RCC_Driver_T* RCC_Driver;

#endif /* RCC_H_ */